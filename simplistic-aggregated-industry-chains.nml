/*
    License: GPL v2
    https://github.com/GraionDilach/TODO
*/

// ===== HEADER =====

if (openttd_version < version_openttd(1, 9, 0)) {
    error(FATAL, REQUIRES_OPENTTD, "1.9.0");
}

if (climate == CLIMATE_TOYLAND) {
 error(FATAL, string(STR_ERR_NO_TOYLAND));
}

grf {
    grfid: "zgy\00";
    name: string(STR_GRF_NAME);
    desc: string(STR_GRF_DESCRIPTION);
    version: 0000;
    min_compatible_version: 10;
    url: string(STR_GRF_URL);
}

// ===== CARGO TABLE =====

cargotable {
    // Note that for ECS compatibility, classes from ECS need to inherit the index to work with ECS Houses
    // Vanilla cargos
    PASS, // #0 in OTTD Temperate & ECS
    COAL, // #1 in OTTD Temperate & ECS
    MAIL, // #2 in OTTD Temperate & ECS
    OIL_, // #3 in OTTD Temperate & ECS
    LVST, // #4 in OTTD Temperate & ECS
    GOOD, // #5 in OTTD Temperate & ECS
    GRAI, // #6 in OTTD/ECS, OpenGFX+ Industries merged MAIZ/WHEA into GRAI already, also see ECS CERE
    WOOD, // #7 in OTTD Temperate & ECS
    IORE, // #8 in OTTD Temperate & ECS
    STEL, // #9 in OTTD Temperate & ECS, renamed to Metal to include Copper
    VALU, // #10 in OTTD Temperate & ECS
    FOOD, // #11 in OTTD Arctic, Tropic & ECS
    PAPR, // #12 in ECS, #9 in OTTD Arctic
    WATR, // #27 in ECS, #9 in OTTD Tropic
    // following ones received sorta-dynamic IDs
    FRUT, // #14 here, #13 in ECS (but pushed aside for beverage), #4 in OTTD Tropic
    CORE, // #19 here, #8 in OTTD Tropic
    DIAM, // #21 here, #10 in OTTD Tropic
    GOLD, // #26 here, #10 in OTTD Arctic
    RUBR, // #28 here, #1 in OTTD Tropic
    // New cargos
    // ECS/NewCargos copies
    BEER, // #13 here, Beverage, index inherited from mb's NewCargos
    DYES, // #20 here, Dyes, index inherited from ECS
    FICR, // #29 here, Flax, index and label inherited from ECS
    GLAS, // #18 here, Glass, index inherited from ECS
    LIME, // #16 here, Limestone, index inherited from ECS
    OLSD, // #22 here/in ECS, Oil Seeds, coulda use FIRS FERT sunflower as icon
    PETR, // #25 here, Fuel Oil (Petrol), index inherited from ECS
    RFPR, // #23 here, Chemicals, index inherited from ECS
    SAND, // #17 here, Sand, index inherited from ECS
    TOUR, // #31 here/in ECS, Tourist
    VEHI, // #24 here, Devices (mostly Vehicles elsewhere), index inherited from ECS
    WOOL, // #15 here, Wool, index inherited from ECS
    // FIRS copies
    CLAY, // #30 here, Clay
    GRVL, // #32 here, Stone
    SCMT, // #33 here, Scrap Metal
    SULP, // #34 here, Sulphur, defined as #27 in http://www.ttdpatch.de/ecs.html, but isn't part of the ECS NewGRFs
    // Additional ones
    WSTE, // #35 here, Waste
    // Unused indices
    // #36+
}

// ===== DISABLE DEFAULT CARGOS =====

disable_item(FEAT_CARGOS);

// ===== CARGO DATA =====

/*
CC conversion table
bit | OTTD              | FRAX
  0 | CC_PASSENGERS     | CC_PASSENGERS
  1 | CC_MAIL           | CC_MAIL
  2 | CC_EXPRESS        | CC_EXPRESS
  3 | CC_ARMOURED       | CC_ARMOURED
  4 | CC_BULK           | CC_OPEN_BULK
  5 | CC_PIECE_GOODS    | CC_PIECE_GOODS
  6 | CC_LIQUID         | CC_LIQUID_BULK
  7 | CC_REFRIGERATED   | CC_REFRIGERATED
  8 | CC_HAZARDOUS      | CC_GAS_BULK
  9 | CC_COVERED        | CC_COVERED_BULK
 10 | CC_OVERSIZED      | CC_FLATBED
 11 | CC_POWDERIZED     | CC_POWDER_BULK
 12 | CC_NON_POURABLE   | CC_WEIRD
 13 | CC_POTABLE        | CC_POTABLE
 14 | CC_NON_POTABLE    | CC_NON_POTABLE
*/

spriteset(cargoicon_passenger) {
    [0, 0, "gfx/cargo_icons/pass.png"]
}

item(FEAT_CARGOS, cargo_passenger, 0) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_PASSENGERS;
        unit_name: TTD_STR_CARGO_SINGULAR_PASSENGER;
        units_of_cargo: TTD_STR_PASSENGERS;
        items_of_cargo: TTD_STR_QUANTITY_PASSENGERS;
        type_abbreviation: TTD_STR_ABBREV_PASSENGERS;
        sprite: NEW_CARGO_SPRITE;
        weight: 0.0625; // 1/16
        station_list_colour: 152;
        cargo_payment_list_colour: 152;
        is_freight: 0;
        cargo_classes: bitmask(CC_PASSENGERS);
        cargo_label: "PASS";
        town_growth_effect: TOWNGROWTH_PASSENGERS;
        town_growth_multiplier: 1.0;
        penalty_lowerbound: 0;
        single_penalty_length: 24;
        price_factor: 137;
        capacity_multiplier: 4;
        number: 0;
    }
    graphics {
        cargoicon_passenger;
    }
}

item(FEAT_CARGOS, cargo_coal, 1) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_COAL;
        unit_name: TTD_STR_CARGO_SINGULAR_COAL;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_COAL;
        type_abbreviation: TTD_STR_ABBREV_COAL;
        sprite: 4298; // vanilla
        weight: 1;
        station_list_colour: 6;
        cargo_payment_list_colour: 6;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_NON_POTABLE);
        cargo_label: "COAL";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 40;
        single_penalty_length: 255;
        price_factor: (5916 * 10.0 * 20 * 255) / (1 << 21); // 143.869400024414
        capacity_multiplier: 1;
        number: 1;
    }
}

item(FEAT_CARGOS, cargo_mail, 2) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_MAIL;
        unit_name: TTD_STR_CARGO_SINGULAR_MAIL;
        units_of_cargo: TTD_STR_BAGS;
        items_of_cargo: TTD_STR_QUANTITY_MAIL;
        type_abbreviation: TTD_STR_ABBREV_MAIL;
        sprite: 4299; // vanilla
        weight: 0.25; // 4/16
        station_list_colour: 15;
        cargo_payment_list_colour: 15;
        is_freight: 0;
        cargo_classes: bitmask(CC_MAIL);
        cargo_label: "MAIL";
        town_growth_effect: TOWNGROWTH_MAIL;
        town_growth_multiplier: 1.0;
        penalty_lowerbound: 20;
        single_penalty_length: 90;
        price_factor: 167;
        capacity_multiplier: 2;
        number: 2;
    }
}

item(FEAT_CARGOS, cargo_oil, 3) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_OIL;
        unit_name: TTD_STR_CARGO_SINGULAR_OIL;
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: TTD_STR_QUANTITY_OIL;
        type_abbreviation: TTD_STR_ABBREV_OIL;
        sprite: 4300; // vanilla
        weight: 1;
        station_list_colour: 174;
        cargo_payment_list_colour: 174;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID, CC_NON_POTABLE);
        cargo_label: "OIL_";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: (4437 * 10.0 * 20 * 255) / (1 << 21); // Temperate, 107.902050018311
        //price_factor: (4892 * 10.0 * 20 * 255) / (1 << 21); // Tropic, 118.967056274414
        capacity_multiplier: 1;
        number: 3;
    }
}

item(FEAT_CARGOS, cargo_livestock, 4) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_LIVESTOCK;
        unit_name: TTD_STR_CARGO_SINGULAR_LIVESTOCK;
        units_of_cargo: TTD_STR_ITEMS;
        items_of_cargo: TTD_STR_QUANTITY_LIVESTOCK;
        type_abbreviation: TTD_STR_ABBREV_LIVESTOCK;
        sprite: 4301; // vanilla
        weight: 0.1875; // 3/16
        station_list_colour: 208;
        cargo_payment_list_colour: 208;
        is_freight: 1;
        cargo_classes: bitmask(CC_NON_POURABLE, CC_NON_POTABLE);
        cargo_label: "LVST";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 4;
        single_penalty_length: 18;
        price_factor: 122;
        capacity_multiplier: 1;
        number: 4;
    }
}

item(FEAT_CARGOS, cargo_goods, 5) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_GOODS;
        unit_name: TTD_STR_CARGO_SINGULAR_GOODS;
        units_of_cargo: TTD_STR_CRATES;
        items_of_cargo: TTD_STR_QUANTITY_GOODS;
        type_abbreviation: TTD_STR_ABBREV_GOODS;
        sprite: 4302; // vanilla
        weight: 0.5; // 8/16
        station_list_colour: 194;
        cargo_payment_list_colour: 194;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_OVERSIZED, CC_EXPRESS, CC_NON_POTABLE);
        cargo_label: "GOOD";
        town_growth_effect: TOWNGROWTH_GOODS;
        town_growth_multiplier: 1;
        penalty_lowerbound: 10;
        single_penalty_length: 56;
        price_factor: 169;
        capacity_multiplier: 1;
        number: 5;
    }
}

item(FEAT_CARGOS, cargo_grain, 6) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_GRAIN;
        unit_name: TTD_STR_CARGO_SINGULAR_GRAIN;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_GRAIN;
        type_abbreviation: TTD_STR_ABBREV_GRAIN;
        sprite: 4303; // vanilla
        weight: 1;
        station_list_colour: 191;
        cargo_payment_list_colour: 191;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED, CC_POTABLE);
        cargo_label: "GRAI";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 4;
        single_penalty_length: 40;
        price_factor: (4778 * 10.0 * 20 * 255) / (1 << 21); // 116.194725036621
        capacity_multiplier: 1;
        number: 6;
    }
}

item(FEAT_CARGOS, cargo_wood, 7) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_WOOD;
        unit_name: TTD_STR_CARGO_SINGULAR_WOOD;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_WOOD;
        type_abbreviation: TTD_STR_ABBREV_WOOD;
        sprite: 4304; // vanilla
        weight: 1;
        station_list_colour: 84;
        cargo_payment_list_colour: 84;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_OVERSIZED, CC_NON_POTABLE);
        cargo_label: "WOOD";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 25;
        single_penalty_length: 255;
        price_factor: (5005 * 10.0 * 20 * 255) / (1 << 21); // 121.715068817139
        capacity_multiplier: 1;
        number: 7;
    }
}

item(FEAT_CARGOS, cargo_iron_ore, 8) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_IRON_ORE;
        unit_name: TTD_STR_CARGO_SINGULAR_IRON_ORE;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_IRON_ORE;
        type_abbreviation: TTD_STR_ABBREV_IRON_ORE;
        sprite: 4305; // vanilla
        weight: 1;
        station_list_colour: 184;
        cargo_payment_list_colour: 184;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_POTABLE);
        cargo_label: "IORE";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 40;
        single_penalty_length: 255;
        price_factor: (5120 * 10.0 * 20 * 255) / (1 << 21); // 124.51171875
        capacity_multiplier: 1;
        number: 8;
    }
}

item(FEAT_CARGOS, cargo_metal, 9) {
    property {
        type_name: string(STR_CARGO_PLURAL_METAL);
        unit_name: string(STR_CARGO_SINGULAR_METAL);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_METAL);
        type_abbreviation: string(STR_ABBREV_METAL);
        sprite: 4306; // vanilla
        weight: 1;
        station_list_colour: 10;
        cargo_payment_list_colour: 10;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_OVERSIZED, CC_NON_POTABLE);
        cargo_label: "STEL";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 14;
        single_penalty_length: 255;
        price_factor: (5688 * 10.0 * 20 * 255) / (1 << 21); // 138.324737548828
        capacity_multiplier: 1;
        number: 9;
    }
}

item(FEAT_CARGOS, cargo_valuables, 10) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_VALUABLES;
        unit_name: TTD_STR_CARGO_SINGULAR_VALUABLES;
        units_of_cargo: TTD_STR_BAGS;
        items_of_cargo: TTD_STR_QUANTITY_VALUABLES;
        type_abbreviation: TTD_STR_ABBREV_VALUABLES;
        sprite: 4307; // vanilla
        weight: 0.125; // 2/16
        station_list_colour: 69;
        cargo_payment_list_colour: 69;
        is_freight: 1;
        cargo_classes: bitmask(CC_ARMOURED, CC_EXPRESS, CC_NON_POTABLE);
        cargo_label: "VALU";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 200;
        capacity_multiplier: 2;
        number: 10;
    }
}

item(FEAT_CARGOS, cargo_food, 11) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_FOOD;
        unit_name: TTD_STR_CARGO_SINGULAR_FOOD;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_FOOD;
        type_abbreviation: TTD_STR_ABBREV_FOOD;
        sprite: 4312; // vanilla
        weight: 1;
        station_list_colour: 48;
        cargo_payment_list_colour: 48;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_REFRIGERATED, CC_EXPRESS, CC_POTABLE);
        cargo_label: "FOOD";
        town_growth_effect: TOWNGROWTH_FOOD;
        town_growth_multiplier: 1;
        penalty_lowerbound: 0;
        single_penalty_length: 30;
        price_factor: 168;
        capacity_multiplier: 1;
        number: 11;
    }
}

item(FEAT_CARGOS, cargo_paper, 12) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_PAPER;
        unit_name: TTD_STR_CARGO_SINGULAR_PAPER;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_PAPER;
        type_abbreviation: TTD_STR_ABBREV_PAPER;
        sprite: 4313; // vanilla
        weight: 1;
        station_list_colour: 10;
        cargo_payment_list_colour: 10;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_OVERSIZED, CC_NON_POTABLE);
        cargo_label: "PAPR";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 12;
        single_penalty_length: 60;
        price_factor: 143;
        capacity_multiplier: 1;
        number: 12;
    }
}

spriteset(cargoicon_beverage) {
    [0, 0, "gfx/cargo_icons/beer.png"]
}

item(FEAT_CARGOS, cargo_beverage, 13) {
    property {
        type_name: string(STR_CARGO_PLURAL_BEVERAGE);
        unit_name: string(STR_CARGO_SINGULAR_BEVERAGE);
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: string(STR_QUANTITY_BEVERAGE);
        type_abbreviation: string(STR_ABBREV_BEVERAGE);
        sprite: NEW_CARGO_SPRITE; // FIRS
        weight: 1;
        station_list_colour: 84;
        cargo_payment_list_colour: 84;
        is_freight: 1;
        cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_LIQUID, CC_POTABLE);
        cargo_label: "BEER";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 9;
        single_penalty_length: 36;
        price_factor: 166;
        capacity_multiplier: 1;
        number: 13;
    }
    graphics {
        cargoicon_beverage;
    }
}

item(FEAT_CARGOS, cargo_fruit, 14) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_FRUIT;
        unit_name: TTD_STR_CARGO_SINGULAR_FRUIT;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_FRUIT;
        type_abbreviation: TTD_STR_ABBREV_FRUIT;
        sprite: 4308; // vanilla
        weight: 1;
        station_list_colour: 208;
        cargo_payment_list_colour: 208;
        is_freight: 1;
        cargo_classes: bitmask(CC_EXPRESS, CC_PIECE_GOODS, CC_COVERED, CC_REFRIGERATED, CC_POTABLE);
        cargo_label: "FRUT";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 0;
        single_penalty_length: 26;
        price_factor: 124;
        capacity_multiplier: 1;
        number: 14;
    }
}

spriteset(cargoicon_wool) {
    [0, 0, "gfx/cargo_icons/wool.png"]
}

item(FEAT_CARGOS, cargo_wool, 15) {
    property {
        type_name: string(STR_CARGO_PLURAL_WOOL);
        unit_name: string(STR_CARGO_SINGULAR_WOOL);
        units_of_cargo: TTD_STR_ITEMS;
        items_of_cargo: string(STR_QUANTITY_WOOL);
        type_abbreviation: string(STR_ABBREV_WOOL);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 15;
        cargo_payment_list_colour: 15;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_NON_POTABLE);
        cargo_label: "WOOL";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 10;
        single_penalty_length: 48;
        price_factor: (5005 * 10.0 * 20 * 255) / (1 << 21); // 121.715068817139
        capacity_multiplier: 1;
        number: 15;
    }
    graphics {
        cargoicon_wool;
    }
}

spriteset(cargoicon_limestone) {
    [0, 0, "gfx/cargo_icons/lime.png"]
}

item(FEAT_CARGOS, cargo_limestone, 16) {
    property {
        type_name: string(STR_CARGO_PLURAL_LIMESTONE);
        unit_name: string(STR_CARGO_SINGULAR_LIMESTONE);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_LIMESTONE);
        type_abbreviation: string(STR_ABBREV_LIMESTONE);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 57;
        cargo_payment_list_colour: 57;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_NON_POTABLE);
        cargo_label: "LIME";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 38;
        single_penalty_length: 255;
        price_factor: (4322 * 10.0 * 20 * 255) / (1 << 21); // 105.105400085449
        capacity_multiplier: 1;
        number: 16;
    }
    graphics {
        cargoicon_limestone;
    }
}

spriteset(cargoicon_sand) {
    [0, 0, "gfx/cargo_icons/sand.png"]
}

item(FEAT_CARGOS, cargo_sand, 17) {
    property {
        type_name: string(STR_CARGO_PLURAL_SAND);
        unit_name: string(STR_CARGO_SINGULAR_SAND);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_SAND);
        type_abbreviation: string(STR_ABBREV_SAND);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 58;
        cargo_payment_list_colour: 58;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_POWDERIZED, CC_NON_POTABLE);
        cargo_label: "SAND";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 40;
        single_penalty_length: 255;
        price_factor: 93;
        capacity_multiplier: 1;
        number: 17;
    }
    graphics {
        cargoicon_sand;
    }
}

spriteset(cargoicon_glass) {
    [0, 0, "gfx/cargo_icons/glas.png"]
}

item(FEAT_CARGOS, cargo_glass, 18) {
    property {
        type_name: string(STR_CARGO_PLURAL_GLASS);
        unit_name: string(STR_CARGO_SINGULAR_GLASS);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_GLASS);
        type_abbreviation: string(STR_ABBREV_GLASS);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 153;
        cargo_payment_list_colour: 153;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_OVERSIZED, CC_NON_POTABLE);
        cargo_label: "GLAS";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 12;
        single_penalty_length: 180;
        price_factor: (5574 * 10.0 * 20 * 255) / (1 << 21); // 138.324737548828
        capacity_multiplier: 1;
        number: 18;
    }
    graphics {
        cargoicon_glass;
    }
}

item(FEAT_CARGOS, cargo_copper_ore, 19) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_COPPER_ORE;
        unit_name: TTD_STR_CARGO_SINGULAR_COPPER_ORE;
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: TTD_STR_QUANTITY_COPPER_ORE;
        type_abbreviation: TTD_STR_ABBREV_COPPER_ORE;
        sprite: 4309; // vanilla
        weight: 1;
        station_list_colour: 184;
        cargo_payment_list_colour: 184;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_POTABLE);
        cargo_label: "CORE";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: (4892 * 10.0 * 20 * 255) / (1 << 21); // 118.967056274414
        capacity_multiplier: 1;
        number: 19;
    }
}

spriteset(cargoicon_dyes) {
    [0, 0, "gfx/cargo_icons/dyes.png"]
}

item(FEAT_CARGOS, cargo_dyes, 20) {
    property {
        type_name: string(STR_CARGO_PLURAL_DYES);
        unit_name: string(STR_CARGO_SINGULAR_DYES);
        units_of_cargo: TTD_STR_BAGS;
        items_of_cargo: string(STR_QUANTITY_DYES);
        type_abbreviation: string(STR_ABBREV_DYES);
        sprite: NEW_CARGO_SPRITE;
        weight: 0.25; // 4/16
        station_list_colour: 184;
        cargo_payment_list_colour: 184;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_NON_POTABLE);
        cargo_label: "DYES";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 20;
        single_penalty_length: 255;
        price_factor: 134; // FIRS paints and coatings
        capacity_multiplier: 2;
        number: 20;
    }
    graphics {
        cargoicon_dyes;
    }
}

item(FEAT_CARGOS, cargo_diamond, 21) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_DIAMONDS;
        unit_name: TTD_STR_CARGO_SINGULAR_DIAMOND;
        units_of_cargo: TTD_STR_BAGS;
        items_of_cargo: TTD_STR_QUANTITY_DIAMONDS;
        type_abbreviation: TTD_STR_ABBREV_DIAMONDS;
        sprite: 4311; // vanilla
        weight: 0.125; // 2/16
        station_list_colour: 202;
        cargo_payment_list_colour: 202;
        is_freight: 1;
        cargo_classes: bitmask(CC_ARMOURED, CC_NON_POTABLE);
        cargo_label: "DIAM";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 179;
        capacity_multiplier: 2;
        number: 21;
    }
}

spriteset(cargoicon_oil_seed) {
    [0, 0, "gfx/cargo_icons/olsd.png"]
}

item(FEAT_CARGOS, cargo_oil_seed, 22) {
    property {
        type_name: string(STR_CARGO_PLURAL_OIL_SEED);
        unit_name: string(STR_CARGO_SINGULAR_OIL_SEED);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_OIL_SEED);
        type_abbreviation: string(STR_ABBREV_OIL_SEED);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 53;
        cargo_payment_list_colour: 53;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED, CC_NON_POTABLE);
        cargo_label: "OLSD";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 20;
        single_penalty_length: 128;
        price_factor: 116;
        capacity_multiplier: 1;
        number: 22;
    }
    graphics {
        cargoicon_oil_seed;
    }
}

spriteset(cargoicon_chemicals) {
    [0, 0, "gfx/cargo_icons/rfpr.png"]
}

item(FEAT_CARGOS, cargo_chemicals, 23) {
    property {
        type_name: string(STR_CARGO_PLURAL_CHEMICALS);
        unit_name: string(STR_CARGO_SINGULAR_CHEMICALS);
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: string(STR_QUANTITY_CHEMICALS);
        type_abbreviation: string(STR_ABBREV_CHEMICALS);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 174;
        cargo_payment_list_colour: 174;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID, CC_NON_POTABLE);
        cargo_label: "RFPR";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 25;
        single_penalty_length: 255;
        price_factor: 115;
        capacity_multiplier: 1;
        number: 23;
    }
    graphics {
        cargoicon_chemicals;
    }
}

spriteset(cargoicon_device) {
    [0, 0, "gfx/cargo_icons/vehi.png"]
}

item(FEAT_CARGOS, cargo_device, 24) {
    property {
        type_name: string(STR_CARGO_PLURAL_DEVICE);
        unit_name: string(STR_CARGO_SINGULAR_DEVICE);
        units_of_cargo: string(STR_QUANTITY_DEVICE);
        items_of_cargo: string(STR_QUANTITY_DEVICE);
        type_abbreviation: string(STR_ABBREV_DEVICE);
        sprite: NEW_CARGO_SPRITE;
        weight: 1.15;
        station_list_colour: 194;
        cargo_payment_list_colour: 194;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_OVERSIZED, CC_EXPRESS, CC_NON_POTABLE);
        cargo_label: "VEHI";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 15;
        single_penalty_length: 128;
        price_factor: 175;
        capacity_multiplier: 1;
        number: 24;
    }
    graphics {
        cargoicon_device;
    }
}

spriteset(cargoicon_petrol) {
    [0, 0, "gfx/cargo_icons/petr.png"]
}

item(FEAT_CARGOS, cargo_petrol, 25) {
    property {
        type_name: string(STR_CARGO_PLURAL_PETROL);
        unit_name: string(STR_CARGO_SINGULAR_PETROL);
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: string(STR_QUANTITY_PETROL);
        type_abbreviation: string(STR_ABBREV_PETROL);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 174;
        cargo_payment_list_colour: 174;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID, CC_NON_POTABLE);
        cargo_label: "PETR";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 25;
        single_penalty_length: 255;
        price_factor: 145;
        capacity_multiplier: 1;
        number: 25;
    }
    graphics {
        cargoicon_petrol;
    }
}

item(FEAT_CARGOS, cargo_gold, 26) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_GOLD;
        unit_name: TTD_STR_CARGO_SINGULAR_GOLD;
        units_of_cargo: TTD_STR_BAGS;
        items_of_cargo: TTD_STR_QUANTITY_GOLD;
        type_abbreviation: TTD_STR_ABBREV_GOLD;
        sprite: 4307; // vanilla
        weight: 0.5; // 8/16
        station_list_colour: 67;
        cargo_payment_list_colour: 67;
        is_freight: 1;
        cargo_classes: bitmask(CC_ARMOURED, CC_NON_POTABLE);
        cargo_label: "GOLD";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 152;
        capacity_multiplier: 2;
        number: 26;
    }
}

item(FEAT_CARGOS, cargo_water, 27) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_WATER;
        unit_name: TTD_STR_CARGO_SINGULAR_WATER;
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: TTD_STR_QUANTITY_WATER;
        type_abbreviation: TTD_STR_ABBREV_WATER;
        sprite: 4310; // vanilla
        weight: 1;
        station_list_colour: 160;
        cargo_payment_list_colour: 160;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID, CC_POTABLE);
        cargo_label: "WATR";
        town_growth_effect: TOWNGROWTH_WATER;
        town_growth_multiplier: 1;
        penalty_lowerbound: 20;
        single_penalty_length: 80;
        price_factor: (4664 * 10.0 * 20 * 255) / (1 << 21); // 113.422393798828
        capacity_multiplier: 1;
        number: 27;
    }
}

item(FEAT_CARGOS, cargo_rubber, 28) {
    property {
        type_name: TTD_STR_CARGO_PLURAL_RUBBER;
        unit_name: TTD_STR_CARGO_SINGULAR_RUBBER;
        units_of_cargo: TTD_STR_LITERS;
        items_of_cargo: TTD_STR_QUANTITY_RUBBER;
        type_abbreviation: TTD_STR_ABBREV_RUBBER;
        sprite: 4314; // vanilla
        weight: 1;
        station_list_colour: 6;
        cargo_payment_list_colour: 6;
        is_freight: 1;
        cargo_classes: bitmask(CC_LIQUID, CC_NON_POTABLE);
        cargo_label: "RUBR";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 10;
        single_penalty_length: 36;
        price_factor: 110;
        capacity_multiplier: 1;
        number: 28;
    }
}

spriteset(cargoicon_flax) {
    [0, 0, "gfx/cargo_icons/ficr.png"]
}

item(FEAT_CARGOS, cargo_flax, 29) {
    property {
        type_name: string(STR_CARGO_PLURAL_FLAX);
        unit_name: string(STR_CARGO_SINGULAR_FLAX);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_FLAX);
        type_abbreviation: string(STR_ABBREV_FLAX);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 187;
        cargo_payment_list_colour: 187;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_COVERED, CC_NON_POTABLE);
        cargo_label: "FICR";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 4;
        single_penalty_length: 40;
        price_factor: 111;
        capacity_multiplier: 1;
        number: 29;
    }
    graphics {
        cargoicon_flax;
    }
}

spriteset(cargoicon_clay) {
    [0, 0, "gfx/cargo_icons/clay.png"]
}

item(FEAT_CARGOS, cargo_clay, 30) {
    property {
        type_name: string(STR_CARGO_PLURAL_CLAY);
        unit_name: string(STR_CARGO_SINGULAR_CLAY);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_CLAY);
        type_abbreviation: string(STR_ABBREV_CLAY);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 117;
        cargo_payment_list_colour: 117;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_COVERED, CC_NON_POTABLE);
        cargo_label: "CLAY";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: (4209 * 10.0 * 20 * 255) / (1 << 21); // 102.357387542725
        capacity_multiplier: 1;
        number: 30;
    }
    graphics {
        cargoicon_clay;
    }
}

spriteset(cargoicon_tourist) {
    [0, 0, "gfx/cargo_icons/tour.png"]
}

item(FEAT_CARGOS, cargo_tourist, 31) {
    property {
        type_name: string(STR_CARGO_PLURAL_TOURIST);
        unit_name: string(STR_CARGO_SINGULAR_TOURIST);
        units_of_cargo: string(STR_QUANTITY_TOURIST);
        items_of_cargo: string(STR_QUANTITY_TOURIST);
        type_abbreviation: string(STR_ABBREV_TOURIST);
        sprite: NEW_CARGO_SPRITE;
        weight: 0.125;
        station_list_colour: 94;
        cargo_payment_list_colour: 94;
        is_freight: 0;
        cargo_classes: bitmask(CC_PASSENGERS); // omitting CC_EXPRESS, because that also allows them to be stuffed at armored vans in FRAX
        cargo_label: "TOUR";
        town_growth_effect: TOWNGROWTH_PASSENGERS;
        town_growth_multiplier: 1.25;
        penalty_lowerbound: 0;
        single_penalty_length: 15; // 2/3 passenger value as tourists are usually in a hurry
        price_factor: 191.8; // PASS*1.4
        capacity_multiplier: 2.67;
        number: 31;
    }
    graphics {
        cargoicon_tourist;
    }
}

spriteset(cargoicon_stone) {
    [0, 0, "gfx/cargo_icons/grvl.png"]
}

item(FEAT_CARGOS, cargo_stone, 32) {
    property {
        type_name: string(STR_CARGO_PLURAL_STONE);
        unit_name: string(STR_CARGO_SINGULAR_STONE);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_STONE);
        type_abbreviation: string(STR_ABBREV_STONE);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 36;
        cargo_payment_list_colour: 36;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_NON_POTABLE);
        cargo_label: "GRVL";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 68;
        capacity_multiplier: 1;
        number: 32;
    }
    graphics {
        cargoicon_stone;
    }
}

spriteset(cargoicon_scrap_metal) {
    [0, 0, "gfx/cargo_icons/scmt.png"]
}

item(FEAT_CARGOS, cargo_scrap_metal, 33) {
    property {
        type_name: string(STR_CARGO_PLURAL_SCRAP_METAL);
        unit_name: string(STR_CARGO_SINGULAR_SCRAP_METAL);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_SCRAP_METAL);
        type_abbreviation: string(STR_ABBREV_SCRAP_METAL);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 57;
        cargo_payment_list_colour: 57;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_NON_POTABLE);
        cargo_label: "SCMT";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 38;
        single_penalty_length: 255;
        price_factor: 107;
        capacity_multiplier: 1;
        number: 33;
    }
    graphics {
        cargoicon_scrap_metal;
    }
}

spriteset(cargoicon_sulphur) {
    [0, 0, "gfx/cargo_icons/sulp.png"]
}

item(FEAT_CARGOS, cargo_sulphur, 34) {
    property {
        type_name: string(STR_CARGO_PLURAL_SULPHUR);
        unit_name: string(STR_CARGO_SINGULAR_SULPHUR);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_SULPHUR);
        type_abbreviation: string(STR_ABBREV_SULPHUR);
        sprite: NEW_CARGO_SPRITE;
        weight: 1;
        station_list_colour: 190;
        cargo_payment_list_colour: 190;
        is_freight: 1;
        cargo_classes: bitmask(CC_BULK, CC_POWDERIZED, CC_NON_POTABLE);
        cargo_label: "SULP";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 30;
        single_penalty_length: 255;
        price_factor: 105;
        capacity_multiplier: 1;
        number: 34;
    }
    graphics {
        cargoicon_sulphur;
    }
}

item(FEAT_CARGOS, cargo_waste, 35) {
    property {
        type_name: string(STR_CARGO_PLURAL_WASTE);
        unit_name: string(STR_CARGO_SINGULAR_WASTE);
        units_of_cargo: TTD_STR_TONS;
        items_of_cargo: string(STR_QUANTITY_WASTE);
        type_abbreviation: string(STR_ABBREV_WASTE);
        sprite: 4319;
        weight: 1;
        station_list_colour: 16;
        cargo_payment_list_colour: 16;
        is_freight: 1;
        cargo_classes: bitmask(CC_PIECE_GOODS, CC_BULK, CC_NON_POTABLE);
        cargo_label: "WSTE";
        town_growth_effect: TOWNGROWTH_NONE;
        town_growth_multiplier: 0;
        penalty_lowerbound: 38;
        single_penalty_length: 255;
        price_factor: 100;
        capacity_multiplier: 1;
        number: 35;
    }
}

// ===== INDUSTRY DATA =====

// disable default industries to help debugging
disable_item(FEAT_INDUSTRIES);

// never place primary industries close to each other

// Coal Mine, #0
if (1) {
    item(FEAT_INDUSTRIES, industry_coal_mine, 0) {
        property {
            substitute: 0;
            override: 0;
            cargo_types: [
                produce_cargo("COAL", 15)
            ];
            prob_map_gen: 8;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_coal_mine)
            ];
            nearby_station_name: string(STR_INDUSTRY_COAL_MINE_STATION_NAME);
        }
    }
}

// Power Plant, #1
if (1) {
    item(FEAT_INDUSTRYTILES, power_plant_tile_1) {
        property {
            substitute: 7;
            override: 7;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, power_plant_tile_2) {
        property {
            substitute: 8;
            override: 8;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, power_plant_tile_3) {
        property {
            substitute: 9;
            override: 9;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, power_plant_tile_4) {
        property {
            substitute: 10;
            override: 10;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_power_plant, 1) {
        property {
            substitute: 1;
            override: 1;
            cargo_types: [
                accept_cargo("COAL"),
                accept_cargo("PETR"),
                accept_cargo("WSTE")
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_BLACK_HOLE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_coal_mine)
            ];
            nearby_station_name: string(STR_INDUSTRY_POWER_STATION_STATION_NAME);
        }
    }
}

// Sawmill, #2, skipped

// Forest, #3
if (1) {
    item(FEAT_INDUSTRIES, industry_forest, 3) {
        property {
            substitute: 3;
            override: 3;
            cargo_types: [
                produce_cargo("WOOD", 13)
            ];
            prob_map_gen: 5;
            prob_in_game: 4;
            life_type: IND_LIFE_TYPE_ORGANIC;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_forest),
                industry_type(IND_TYPE_NEW, industry_paper_mill)
            ];
            nearby_station_name: string(STR_INDUSTRY_FOREST_STATION_NAME);
        }
    }
}

// (Oil) Refinery, #4
if (1) {
    item(FEAT_INDUSTRYTILES, refinery_tile_1) {
        property {
            substitute: 18;
            override: 18;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, refinery_tile_2) {
        property {
            substitute: 19;
            override: 19;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, refinery_tile_3) {
        property {
            substitute: 20;
            override: 20;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, refinery_tile_4) {
        property {
            substitute: 21;
            override: 21;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, refinery_tile_5) {
        property {
            substitute: 22;
            override: 22;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, refinery_tile_6) {
        property {
            substitute: 23;
            override: 23;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_refinery, 4) {
        property {
            substitute: 4;
            override: 4;
            name: string(STR_INDUSTRY_REFINERY_NAME);
            cargo_types: [
                accept_cargo("OIL_", produce_cargo("PETR", 1)),
                accept_cargo("OLSD", produce_cargo("PETR", 1))
            ];
            prob_map_gen: 4;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_oil_rig),
                industry_type(IND_TYPE_NEW, industry_oil_wells)
            ];
            nearby_station_name: string(STR_INDUSTRY_REFINERY_STATION_NAME);
        }
        graphics {
            location_check: CB_RESULT_LOCATION_ALLOW;
        }
    }
}

// Oil Rig, #5
if (1) {
    item(FEAT_INDUSTRIES, industry_oil_rig, 5) {
        property {
            substitute: 5;
            override: 5;
            cargo_types: [
                produce_cargo("OIL_", 15),
                produce_cargo("PASS", 2)
            ];
            prob_map_gen: 3;
            prob_in_game: 6;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_oil_rig),
                industry_type(IND_TYPE_NEW, industry_refinery)
            ];
            nearby_station_name: string(STR_INDUSTRY_OIL_RIG_STATION_NAME);
            spec_flags: bitmask(IND_FLAG_BUILT_ON_WATER, IND_FLAG_AI_CREATES_AIR_AND_SHIP_ROUTES);
        }
    }
}

// Factory, #6
if (1) {
    item(FEAT_INDUSTRYTILES, factory_tile_1) {
        property {
            substitute: 39;
            override: 39;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, factory_tile_2) {
        property {
            substitute: 40;
            override: 40;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, factory_tile_3) {
        property {
            substitute: 41;
            override: 41;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, factory_tile_4) {
        property {
            substitute: 42;
            override: 42;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_factory, 6) {
        property {
            substitute: 6;
            override: 6;
            cargo_types: [
                accept_cargo("STEL", produce_cargo("VEHI", 1)),
                accept_cargo("GLAS", produce_cargo("VEHI", 1)),
                accept_cargo("RUBR", produce_cargo("VEHI", 1))
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_foundry),
                industry_type(IND_TYPE_NEW, industry_rubber_plantation)
            ];
            nearby_station_name: string(STR_INDUSTRY_FACTORY_STATION_NAME);
        }
    }
}

// Printing Works, #7
if (1) {
    item(FEAT_INDUSTRYTILES, printing_works_tile_1) {
        property {
            substitute: 43;
            override: 43;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, printing_works_tile_2) {
        property {
            substitute: 44;
            override: 44;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, printing_works_tile_3) {
        property {
            substitute: 45;
            override: 45;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, printing_works_tile_4) {
        property {
            substitute: 46;
            override: 46;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_printing_works, 7) {
        property {
            substitute: 7;
            override: 7;
            cargo_types: [
                accept_cargo("PAPR", produce_cargo("GOOD", 1)),
                accept_cargo("WOOL", produce_cargo("GOOD", 1)),
                accept_cargo("DYES", produce_cargo("GOOD", 1))
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_paper_mill),
                industry_type(IND_TYPE_NEW, industry_ranch),
                industry_type(IND_TYPE_NEW, industry_chemical_plant)
            ];
            nearby_station_name: string(STR_INDUSTRY_PRINTING_WORKS_STATION_NAME);
        }
    }
}

// Foundry (ex-Steel Mill), #8
if (1) {
    item(FEAT_INDUSTRYTILES, foundry_tile_1) {
        property {
            substitute: 52;
            override: 52;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, foundry_tile_2) {
        property {
            substitute: 53;
            override: 53;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, foundry_tile_3) {
        property {
            substitute: 54;
            override: 54;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, foundry_tile_4) {
        property {
            substitute: 55;
            override: 55;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, foundry_tile_5) {
        property {
            substitute: 56;
            override: 56;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, foundry_tile_6) {
        property {
            substitute: 57;
            override: 57;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_foundry, 8) {
        property {
            substitute: 8;
            override: 8;
            name: string(STR_INDUSTRY_FOUNDRY_NAME);
            cargo_types: [
                accept_cargo("IORE", produce_cargo("STEL", 1)),
                accept_cargo("CORE", produce_cargo("STEL", 1)),
                accept_cargo("SCMT", produce_cargo("STEL", 1))
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_copper_ore_mine),
                industry_type(IND_TYPE_NEW, industry_iron_ore_mine)
            ];
            nearby_station_name: string(STR_INDUSTRY_FOUNDRY_STATION_NAME);
        }
    }
}

// Farm, #9

tilelayout farm_layout_1 {
    0, 0: farm_tile_5;
    0, 1: farm_tile_5;
    0, 2: farm_tile_5;
    0, 3: farm_tile_4;
    1, 0: farm_tile_5;
    1, 1: farm_tile_1;
    1, 2: farm_tile_2;
    1, 3: farm_tile_3;
    2, 0: farm_tile_4;
    2, 1: farm_tile_4;
    2, 2: farm_tile_3;
    2, 3: farm_tile_3;
}

tilelayout farm_layout_2 {
    0, 0: farm_tile_5;
    0, 1: farm_tile_5;
    0, 2: farm_tile_4;
    1, 0: farm_tile_1;
    1, 1: farm_tile_2;
    1, 2: farm_tile_3;
    2, 0: farm_tile_4;
    2, 1: farm_tile_3;
    2, 2: farm_tile_3;
}

tilelayout farm_layout_3 {
    0, 0: farm_tile_5;
    0, 1: farm_tile_4;
    0, 2: farm_tile_5;
    0, 3: farm_tile_5;
    1, 0: farm_tile_4;
    1, 1: farm_tile_3;
    1, 2: farm_tile_3;
    1, 3: farm_tile_4;
    2, 0: farm_tile_1;
    2, 1: farm_tile_2;
    2, 2: farm_tile_5;
    2, 3: farm_tile_3;
}

if (1) {
    item(FEAT_INDUSTRYTILES, farm_tile_1) {
        property {
            substitute: 33;
            override: 33;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, farm_tile_2) {
        property {
            substitute: 34;
            override: 34;
            accepted_cargos: [[PASS, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, farm_tile_3) {
        property {
            substitute: 35;
            override: 35;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, farm_tile_4) {
        property {
            substitute: 36;
            override: 36;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, farm_tile_5) {
        property {
            substitute: 37;
            override: 37;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, farm_tile_6) {
        property {
            substitute: 38;
            override: 38;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_farm, 9) {
        property {
            substitute: 9;
            override: 9;
            layouts: [farm_layout_1, farm_layout_2, farm_layout_3];
            cargo_types: [
                produce_cargo("GRAI", 10),
                produce_cargo("FICR", 10),
                produce_cargo("OLSD", 10)
            ];
            prob_map_gen: 9;
            prob_in_game: 4;
            life_type: IND_LIFE_TYPE_ORGANIC;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_farm),
                industry_type(IND_TYPE_NEW, industry_refinery),
                industry_type(IND_TYPE_NEW, industry_food_processing_plant)
            ];
            nearby_station_name: string(STR_INDUSTRY_FARM_STATION_NAME);
            spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
        }
    }
}

// Copper Ore Mine, #10
if (1) {
    item(FEAT_INDUSTRIES, industry_copper_ore_mine, 10) {
        property {
            substitute: 10;
            override: 10;
            cargo_types: [
                produce_cargo("CORE", 10),
                produce_cargo("SULP", 8)
            ];
            prob_map_gen: 4;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_copper_ore_mine),
                industry_type(IND_TYPE_NEW, industry_foundry)
            ];
            nearby_station_name: string(STR_INDUSTRY_COPPER_ORE_MINE_STATION_NAME);
        }
    }
}

// Oil Wells, #11
if (1) {
    item(FEAT_INDUSTRIES, industry_oil_wells, 11) {
        property {
            substitute: 11;
            override: 11;
            cargo_types: [
                produce_cargo("OIL_", 12),
            ];
            prob_map_gen: 5;
            prob_in_game: 5;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_oil_wells),
                industry_type(IND_TYPE_NEW, industry_refinery)
            ];
            nearby_station_name: string(STR_INDUSTRY_OIL_WELLS_STATION_NAME);
            spec_flags: 0;
        }
    }
}

// City Hall, #12 (was Temperate Bank)
if (1) {
    item(FEAT_INDUSTRYTILES, city_hall_tile_1) {
        property {
            substitute: 58;
            override: 58;
            accepted_cargos: [[PASS, 1], [MAIL, 1], [GOOD, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, city_hall_tile_2) {
        property {
            substitute: 59;
            override: 59;
            accepted_cargos: [[PASS, 1], [FOOD, 1], [GOOD, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_city_hall, 12) {
        property {
            substitute: 12;
            override: 12;
            name: string(STR_INDUSTRY_CITY_HALL_NAME);
            cargo_types: [
                produce_cargo("TOUR", 4),
                accept_cargo("TOUR"),
            ];
            prob_map_gen: 6;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_BLACK_HOLE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_city_hall)
            ];
            spec_flags: bitmask(IND_FLAG_ONLY_IN_LARGE_TOWNS, IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION);
            nearby_station_name: string(STR_INDUSTRY_CITY_HALL_STATION_NAME);
        }
    }
}

// Food Processing Plant, #13
if (1) {
    item(FEAT_INDUSTRYTILES, food_processing_plant_tile_1) {
        property {
            substitute: 60;
            override: 60;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, food_processing_plant_tile_2) {
        property {
            substitute: 61;
            override: 61;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, food_processing_plant_tile_3) {
        property {
            substitute: 62;
            override: 62;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, food_processing_plant_tile_4) {
        property {
            substitute: 63;
            override: 63;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_food_processing_plant, 13) {
        property {
            substitute: 13;
            override: 13;
            cargo_types: [
                accept_cargo("GRAI", produce_cargo("FOOD", 1)),
                accept_cargo("LVST", produce_cargo("FOOD", 1)),
                accept_cargo("FRUT", produce_cargo("FOOD", 1))
            ];
            prob_map_gen: 4;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_farm),
                industry_type(IND_TYPE_NEW, industry_fruit_plantation),
                industry_type(IND_TYPE_NEW, industry_ranch)

            ];
            nearby_station_name: string(STR_INDUSTRY_FOOD_PROCESSING_PLANT_STATION_NAME);
        }
    }
}

// Paper Mill, #14
if (1) {
    item(FEAT_INDUSTRYTILES, paper_mill_tile_1) {
        property {
            substitute: 64;
            override: 64;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, paper_mill_tile_2) {
        property {
            substitute: 65;
            override: 65;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, paper_mill_tile_3) {
        property {
            substitute: 66;
            override: 66;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, paper_mill_tile_4) {
        property {
            substitute: 67;
            override: 67;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, paper_mill_tile_5) {
        property {
            substitute: 68;
            override: 68;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, paper_mill_tile_6) {
        property {
            substitute: 69;
            override: 69;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, paper_mill_tile_7) {
        property {
            substitute: 70;
            override: 70;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, paper_mill_tile_8) {
        property {
            substitute: 71;
            override: 71;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_paper_mill, 14) {
        property {
            substitute: 14;
            override: 14;
            cargo_types: [
                accept_cargo("WOOD", produce_cargo("PAPR", 1)),
                accept_cargo("FICR", produce_cargo("PAPR", 1))
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_farm),
                industry_type(IND_TYPE_NEW, industry_forest),
                industry_type(IND_TYPE_NEW, industry_lumber_mill)
            ];
            nearby_station_name: string(STR_INDUSTRY_PAPER_MILL_STATION_NAME);
        }
    }
}

// Gold Mine, #15
if (1) {
    item(FEAT_INDUSTRIES, industry_gold_mine, 15) {
        property {
            substitute: 15;
            override: 15;
            cargo_types: [
                produce_cargo("GOLD", 7),
                produce_cargo("SAND", 7)
            ];
            prob_map_gen: 4;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_gold_mine),
                industry_type(IND_TYPE_NEW, industry_bank)
            ];
            nearby_station_name: string(STR_INDUSTRY_GOLD_MINE_STATION_NAME);
        }
    }
}

// (Arctic/Tropical) Bank, #16
if (1) {
    item(FEAT_INDUSTRYTILES, bank_tile_1) {
        property {
            substitute: 89;
            override: 89;
            accepted_cargos: [[PASS, 1], [MAIL, 1], [GOOD, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, bank_tile_2) {
        property {
            substitute: 90;
            override: 90;
            accepted_cargos: [[PASS, 1], [FOOD, 1], [GOOD, 1]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_bank, 16) {
        property {
            substitute: 16;
            override: 16;
            cargo_types: [
                produce_cargo("VALU", 6),
                accept_cargo("VALU"),
                accept_cargo("GOLD", produce_cargo("VALU", 0.25)),
                accept_cargo("DIAM", produce_cargo("VALU", 0.25)),
            ];
            prob_map_gen: 6;
            prob_in_game: 7;
            life_type: IND_LIFE_TYPE_BLACK_HOLE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_bank),
                industry_type(IND_TYPE_NEW, industry_gold_mine),
                industry_type(IND_TYPE_NEW, industry_diamond_mine)
            ];
            spec_flags: bitmask(IND_FLAG_ONLY_IN_LARGE_TOWNS, IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION);
            nearby_station_name: string(STR_INDUSTRY_BANK_STATION_NAME);
        }
    }
}

// Diamond Mine, #17
if (1) {
    item(FEAT_INDUSTRIES, industry_diamond_mine, 17) {
        property {
            substitute: 17;
            override: 17;
            cargo_types: [
                produce_cargo("DIAM", 7)
            ];
            prob_map_gen: 4;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_diamond_mine),
                industry_type(IND_TYPE_NEW, industry_bank)
            ];
            nearby_station_name: string(STR_INDUSTRY_DIAMOND_MINE_STATION_NAME);
        }
    }
}

// Iron Ore Mine, #18
if (1) {
    item(FEAT_INDUSTRIES, industry_iron_ore_mine, 18) {
        property {
            substitute: 18;
            override: 18;
            cargo_types: [
                produce_cargo("IORE", 10)
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_iron_ore_mine),
                industry_type(IND_TYPE_NEW, industry_foundry)
            ];
            nearby_station_name: string(STR_INDUSTRY_IRON_ORE_MINE_STATION_NAME);
        }
    }
}

// Fruit Plantation, #19
if (1) {
    item(FEAT_INDUSTRIES, industry_fruit_plantation, 19) {
        property {
            substitute: 19;
            override: 19;
            cargo_types: [
                produce_cargo("FRUT", 10),
                produce_cargo("BEER", 5)
            ];
            prob_map_gen: 4;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_ORGANIC;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_fruit_plantation),
                industry_type(IND_TYPE_NEW, industry_food_processing_plant),
                industry_type(IND_TYPE_NEW, industry_shop)
            ];
            nearby_station_name: string(STR_INDUSTRY_FRUIT_PLANTATION_STATION_NAME);
        }
    }
}

// Rubber Plantation, #20
if (1) {
    item(FEAT_INDUSTRIES, industry_rubber_plantation, 20) {
        property {
            substitute: 20;
            override: 20;
            cargo_types: [
                produce_cargo("RUBR", 10)
            ];
            prob_map_gen: 4;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_ORGANIC;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_rubber_plantation),
                industry_type(IND_TYPE_NEW, industry_factory)
            ];
            nearby_station_name: string(STR_INDUSTRY_RUBBER_PLANTATION_STATION_NAME);
        }
    }
}

// Water Supply, #21
if (1) {
    item(FEAT_INDUSTRIES, industry_water_supply, 21) {
        property {
            substitute: 21;
            override: 21;
            cargo_types: [
                produce_cargo("WATR", 12)
            ];
            prob_map_gen: 4;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_water_supply),
                industry_type(IND_TYPE_NEW, industry_water_tower)
            ];
            nearby_station_name: string(STR_INDUSTRY_WATER_SUPPLY_STATION_NAME);
        }
    }
}

// Water Tower, #22
if (1) {
    item(FEAT_INDUSTRYTILES, water_tower_tile_1) {
        property {
            substitute: 120;
            override: 120;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRIES, industry_water_tower, 22) {
        property {
            substitute: 22;
            override: 22;
            cargo_types: [
                accept_cargo("WATR")
            ];
            prob_map_gen: 6;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_BLACK_HOLE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_water_tower),
                industry_type(IND_TYPE_NEW, industry_water_supply)
            ];
            spec_flags: bitmask(IND_FLAG_ONLY_IN_TOWNS);
            nearby_station_name: string(STR_INDUSTRY_WATER_TOWER_STATION_NAME);
        }
    }
}

// Tropic Factory, #23 skipped

// Ranch (was Tropic Farm), #24
// OpenGFX is missing the dedicated sprites for it though
tilelayout ranch_layout_1 {
    0, 0: farm_tile_1;
    0, 1: farm_tile_2;
    0, 2: farm_tile_4;
    1, 0: farm_tile_6;
    1, 1: farm_tile_6;
    1, 2: farm_tile_3;
}

tilelayout ranch_layout_2 {
    0, 0: farm_tile_6;
    0, 1: farm_tile_6;
    0, 2: farm_tile_4;
    1, 0: farm_tile_1;
    1, 1: farm_tile_2;
    1, 2: farm_tile_3;
    2, 0: farm_tile_4;
    2, 1: farm_tile_3;
    2, 2: farm_tile_6;
}

tilelayout ranch_layout_3 {
    0, 0: farm_tile_3;
    0, 1: farm_tile_1;
    0, 2: farm_tile_2;
    0, 3: farm_tile_4;
    1, 0: farm_tile_6;
    1, 1: farm_tile_6;
    1, 2: farm_tile_6;
    1, 3: farm_tile_6;
}

if (1) {
    item(FEAT_INDUSTRIES, industry_ranch, 24) {
        property {
            substitute: 24;
            override: 24;
            name: string(STR_INDUSTRY_RANCH_NAME);
            layouts: [ranch_layout_1, ranch_layout_2, ranch_layout_3];
            cargo_types: [
                produce_cargo("LVST", 10),
                produce_cargo("WOOL", 10)
            ];
            prob_map_gen: 4;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_ORGANIC;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_ranch),
                industry_type(IND_TYPE_NEW, industry_printing_works),
                industry_type(IND_TYPE_NEW, industry_food_processing_plant)
            ];
            nearby_station_name: string(STR_INDUSTRY_RANCH_STATION_NAME);
            spec_flags: 0;
        }
    }
}

// Lumber Mill, #25
if (1) {
    item(FEAT_INDUSTRIES, industry_lumber_mill, 25) {
        property {
            substitute: 25;
            override: 25;
            cargo_types: [
                produce_cargo("WOOD", 0)
            ];
            prob_map_gen: 1;
            prob_in_game: 1;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_lumber_mill),
                industry_type(IND_TYPE_NEW, industry_forest),
                industry_type(IND_TYPE_NEW, industry_paper_mill)
            ];
            spec_flags: bitmask(IND_FLAG_CUT_TREES, IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION);
            nearby_station_name: string(STR_INDUSTRY_LUMBER_MILL_STATION_NAME);
        }
    }
}

// Shop, #26
tilelayout shop_layout {
    0, 0: shop_tile_1;
}

spriteset(shop_sprite, "gfx/shop/shop.png") {
    [ 0, 0, 64, 36, -31, -4 ]
}

spritelayout shop_tile_1_layout {
       ground   { sprite: GROUNDSPRITE_NORMAL; }
       building { sprite: shop_sprite; }
}

if (1) {
    item(FEAT_INDUSTRYTILES, shop_tile_1) {
        property {
            substitute: 0x00;
            accepted_cargos: [[PASS, 7], [GOOD, 4]];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
            land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
        }
        graphics {
            shop_tile_1_layout;
        }
    }

    item(FEAT_INDUSTRIES, industry_shop, 26) {
        property {
            substitute: 1;
            name: string(STR_INDUSTRY_SHOP_NAME);
            layouts: [shop_layout];
            prob_map_gen: 4;
            prob_in_game: 2;
            cargo_types: [
                accept_cargo("FOOD"),
                accept_cargo("BEER")
            ];
            map_colour: 0x30;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_shop),
                industry_type(IND_TYPE_NEW, industry_food_processing_plant),
                industry_type(IND_TYPE_NEW, industry_fruit_plantation)
            ];
            life_type:                      IND_LIFE_TYPE_BLACK_HOLE;
            fund_cost_multiplier:           100;
            spec_flags:                     bitmask(IND_FLAG_ONLY_IN_TOWNS);
            prospect_chance:                1;
            nearby_station_name:            string(STR_INDUSTRY_SHOP_STATION_NAME);
        }
    }
}

// Chemical Plant, #27
tilelayout jrpetrolplant_tilelayout1 {
    0, 0: jrpetrolplant_tile_distiller;
    0, 1: jrpetrolplant_tile_tallredtanks;
//	0, 2
    1, 0: jrpetrolplant_tile_cracker;
    1, 1: jrpetrolplant_tile_cracker;
    1, 2: jrpetrolplant_tile_shed;
    2, 0: jrpetrolplant_tile_widetank;
    2, 1: jrpetrolplant_tile_widetank;
    2, 2: jrconcrete_tile;
}

tilelayout jrpetrolplant_tilelayout2 {
    0, 0: jrpetrolplant_tile_distiller;
    0, 1: jrpetrolplant_tile_tallredtanks;
//	0, 2
    1, 0: jrconcrete_tile;
    1, 1: jrpetrolplant_tile_cracker;
    1, 2: jrpetrolplant_tile_cracker;
    2, 0: jrpetrolplant_tile_shed;
    2, 1: jrpetrolplant_tile_widetank;
    2, 2: jrpetrolplant_tile_widetank;
}

spritelayout jrconcrete_tile_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
}

item (FEAT_INDUSTRYTILES, jrconcrete_tile) {
    property {
        substitute: 0;
        special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    }
    graphics {
        jrconcrete_tile_spritelayout;
    }
}

spritelayout jrshed_tile_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2061 : construction_state==3 ? 2063 : 2062); }
}

spritelayout jrpetrolplant_tile_distiller_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2084 : construction_state==3 ? 2086 : 2085); }
    building { sprite: (construction_state==0 ? 2084 : construction_state==3 ? 2086 : 2085); xoffset: 6; }
}

spritelayout jrpetrolplant_tile_cracker_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2090 : construction_state==3 ? 2092 : 2091); recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_GREY); }
}

spritelayout jrpetrolplant_tile_tallredtanks_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_ORANGE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_RED); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_ORANGE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_RED); }
}

spritelayout jrpetrolplant_tile_widetank_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2078 : construction_state==3 ? 2080 : 2079); xoffset: 2; yoffset: 2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
}

if (1) {
    item (FEAT_INDUSTRYTILES, jrpetrolplant_tile_distiller) {
        property {
            substitute: 0;
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
        graphics {
            jrpetrolplant_tile_distiller_spritelayout;
        }
    }

    item (FEAT_INDUSTRYTILES, jrpetrolplant_tile_tallredtanks) {
        property {
            substitute: 0;
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
        graphics {
            jrpetrolplant_tile_tallredtanks_spritelayout;
        }
    }

    item (FEAT_INDUSTRYTILES, jrpetrolplant_tile_widetank) {
        property {
            substitute: 0;
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
        graphics {
            jrpetrolplant_tile_widetank_spritelayout;
        }
    }

    item (FEAT_INDUSTRYTILES, jrpetrolplant_tile_shed) {
        property {
            substitute: 0;
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
        graphics {
            jrshed_tile_spritelayout;
        }
    }

    item (FEAT_INDUSTRYTILES, jrpetrolplant_tile_cracker) {
        property {
            substitute: 0;
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
        graphics {
            jrpetrolplant_tile_cracker_spritelayout;
        }
    }

    item(FEAT_INDUSTRIES, industry_chemical_plant, 27) {
        property {
            substitute: 4;
            name: string(STR_INDUSTRY_CHEMICAL_PLANT_NAME);
            layouts: [jrpetrolplant_tilelayout1, jrpetrolplant_tilelayout2];
            cargo_types: [
                accept_cargo("SULP", produce_cargo("DYES", 1)),
                accept_cargo("RFPR", produce_cargo("DYES", 1))
            ];
            prob_map_gen: 4;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_copper_ore_mine),
                industry_type(IND_TYPE_NEW, industry_printing_works),
                industry_type(IND_TYPE_NEW, industry_desalination_plant)
            ];
            map_colour: 165;
            nearby_station_name: string(STR_INDUSTRY_CHEMICAL_PLANT_STATION_NAME);
        }
        graphics {
            location_check: CB_RESULT_LOCATION_ALLOW;
        }
    }
}

// Desalination Plant, #28
switch (FEAT_INDUSTRYTILES, SELF, tile_water_check, (nearby_tile_water_class(0, 0) == WATER_CLASS_SEA)) {
    1: return CB_RESULT_LOCATION_ALLOW;
    return CB_RESULT_LOCATION_DISALLOW;
}

switch (FEAT_INDUSTRYTILES, SELF, tile_slope_check_se, nearby_tile_slope(0, 0) == SLOPE_SE) {
    0: return CB_RESULT_LOCATION_DISALLOW;
    tile_water_check;
}

switch (FEAT_INDUSTRYTILES, SELF, tile_slope_check_sw, nearby_tile_slope(0, 0) == SLOPE_SW) {
    0: return CB_RESULT_LOCATION_DISALLOW;
    tile_water_check;
}

switch (FEAT_INDUSTRYTILES, SELF, tile_slope_check_nw, nearby_tile_slope(0, 0) == SLOPE_NW) {
    0: return CB_RESULT_LOCATION_DISALLOW;
    tile_water_check;
}

switch (FEAT_INDUSTRYTILES, SELF, tile_slope_check_ne, nearby_tile_slope(0, 0) == SLOPE_NE) {
    0: return CB_RESULT_LOCATION_DISALLOW;
    tile_water_check;
}

spritelayout jrdesalplant_tile_pump_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2350 : construction_state==3 ? 2352 : 2351); xoffset: 3; yoffset: 0; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_RED); }
}

spritelayout jrdesalplant_tile_talltanks_se_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
}

spritelayout jrdesalplant_tile_talltanks_sw_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
}

spritelayout jrdesalplant_tile_talltanks_nw_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
}

spritelayout jrdesalplant_tile_talltanks_ne_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_DARK_BLUE); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
    building { sprite: (construction_state==0 ? 2081 : construction_state==3 ? 2083 : 2082); xoffset: 8; yoffset: 8; recolour_mode: RECOLOUR_REMAP; palette: palette_1cc(COLOUR_YELLOW); }
}

spritelayout jrdesalplant_tile_widetank_spritelayout {
    ground { sprite: GROUNDSPRITE_CONCRETE; }
    building { sprite: (construction_state==0 ? 2078 : construction_state==3 ? 2080 : 2079); xoffset: 2; yoffset: 2; recolour_mode: RECOLOUR_REMAP; palette: PALETTE_USE_DEFAULT; }
}

tilelayout desal_plant_layout_se {
    0, 0: jrdesalplant_tile_talltanks_se;
    0, 1: jrdesalplant_tile_widetank;
    1, 1: jrdesalplant_tile_pump;
    1, 0: jrdesalplant_tile_pump_sloped;
}

tilelayout desal_plant_layout_sw {
    0, 0: jrdesalplant_tile_talltanks_sw;
    0, 1: jrdesalplant_tile_pump_sloped;
    1, 1: jrdesalplant_tile_pump;
    1, 0: jrdesalplant_tile_widetank;
}

tilelayout desal_plant_layout_nw {
    0, 0: jrdesalplant_tile_widetank;
    0, 1: jrdesalplant_tile_talltanks_nw;
    1, 1: jrdesalplant_tile_pump_sloped;
    1, 0: jrdesalplant_tile_pump;
}

tilelayout desal_plant_layout_ne {
    0, 0: jrdesalplant_tile_widetank;
    0, 1: jrdesalplant_tile_pump;
    1, 1: jrdesalplant_tile_pump_sloped;
    1, 0: jrdesalplant_tile_talltanks_ne;
}

if (1) {
    item (FEAT_INDUSTRYTILES, jrdesalplant_tile_pump) {
        property {
            substitute: 0;
        }
        graphics {
            default: jrdesalplant_tile_pump_spritelayout;
            foundations: return CB_RESULT_FOUNDATIONS;
            autoslope: return CB_RESULT_AUTOSLOPE;
        }
    }

    item (FEAT_INDUSTRYTILES, jrdesalplant_tile_pump_sloped) {
        property {
            substitute: 0;
            land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
        }
        graphics {
            default: jrdesalplant_tile_pump_spritelayout;
            foundations: return CB_RESULT_FOUNDATIONS;
            autoslope: return CB_RESULT_AUTOSLOPE;
        }
    }

    item (FEAT_INDUSTRYTILES, jrdesalplant_tile_talltanks_se) {
        property {
            substitute: 0;
            land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
        }
        graphics {
            default: jrdesalplant_tile_talltanks_se_spritelayout;
            foundations: return CB_RESULT_FOUNDATIONS;
            autoslope: return CB_RESULT_AUTOSLOPE;
            tile_check: tile_slope_check_se;
        }
    }

    item (FEAT_INDUSTRYTILES, jrdesalplant_tile_talltanks_sw) {
        property {
            substitute: 0;
            land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
        }
        graphics {
            default: jrdesalplant_tile_talltanks_sw_spritelayout;
            foundations: return CB_RESULT_FOUNDATIONS;
            autoslope: return CB_RESULT_AUTOSLOPE;
            tile_check: tile_slope_check_sw;
        }
    }

    item (FEAT_INDUSTRYTILES, jrdesalplant_tile_talltanks_nw) {
        property {
            substitute: 0;
            land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
        }
        graphics {
            default: jrdesalplant_tile_talltanks_nw_spritelayout;
            foundations: return CB_RESULT_FOUNDATIONS;
            autoslope: return CB_RESULT_AUTOSLOPE;
            tile_check: tile_slope_check_nw;
        }
    }

    item (FEAT_INDUSTRYTILES, jrdesalplant_tile_talltanks_ne) {
        property {
            substitute: 0;
            land_shape_flags: bitmask(LSF_ALLOW_ON_WATER);
        }
        graphics {
            default: jrdesalplant_tile_talltanks_ne_spritelayout;
            foundations: return CB_RESULT_FOUNDATIONS;
            autoslope: return CB_RESULT_AUTOSLOPE;
            tile_check: tile_slope_check_ne;
        }
    }

    item (FEAT_INDUSTRYTILES, jrdesalplant_tile_widetank) {
        property {
            substitute: 0;
        }
        graphics {
            default: jrdesalplant_tile_widetank_spritelayout;
            foundations: return CB_RESULT_FOUNDATIONS;
            autoslope: return CB_RESULT_AUTOSLOPE;
        }
    }

    item(FEAT_INDUSTRIES, industry_desalination_plant, 28) {
        property {
            substitute: 21;
            name: string(STR_INDUSTRY_DESALINATION_PLANT_NAME);
            layouts: [desal_plant_layout_se, desal_plant_layout_sw, desal_plant_layout_nw, desal_plant_layout_ne];
            cargo_types: [
                produce_cargo("WATR", 8),
                produce_cargo("RFPR", 8),
            ];
            prob_map_gen: 4;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_desalination_plant),
                industry_type(IND_TYPE_NEW, industry_water_tower),
                industry_type(IND_TYPE_NEW, industry_chemical_plant)
            ];
            map_colour: 151;
            nearby_station_name: string(STR_INDUSTRY_DESALINATION_PLANT_STATION_NAME);
        }
        graphics {
            colour:	(founder == 16) ? COLOUR_LIGHT_BLUE : founder_colour1;
        }
    }
}

// Junkyard, #29
if (1) {
    item(FEAT_INDUSTRIES, industry_junkyard, 29) {
        property {
            substitute: 18;
            name: string(STR_INDUSTRY_JUNKYARD_NAME);
            cargo_types: [
                produce_cargo("SCMT", 9),
                produce_cargo("WSTE", 9),
                produce_cargo("RFPR", 7)
            ];
            prob_map_gen: 4;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_junkyard),
                industry_type(IND_TYPE_NEW, industry_foundry),
                industry_type(IND_TYPE_NEW, industry_power_plant)
            ];
            nearby_station_name: string(STR_INDUSTRY_JUNKYARD_STATION_NAME);
        }
    }
}

// Limestone Quarry, #30
if (1) {
    item(FEAT_INDUSTRIES, industry_limestone_quarry, 30) {
        property {
            substitute: 0;
            name: string(STR_INDUSTRY_LIMESTONE_QUARRY_NAME);
            cargo_types: [
                produce_cargo("LIME", 13)
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_EXTRACTIVE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_limestone_quarry),
                industry_type(IND_TYPE_NEW, industry_glass_works)
            ];
            nearby_station_name: string(STR_INDUSTRY_LIMESTONE_QUARRY_STATION_NAME);
        }
    }
}

// Glass Works, #31
if (1) {
    /*
    item(FEAT_INDUSTRYTILES, printing_works_tile_1) {
        property {
            substitute: 43;
            override: 43;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, printing_works_tile_2) {
        property {
            substitute: 44;
            override: 44;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, printing_works_tile_3) {
        property {
            substitute: 45;
            override: 45;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }

    item(FEAT_INDUSTRYTILES, printing_works_tile_4) {
        property {
            substitute: 46;
            override: 46;
            accepted_cargos: [];
            special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
        }
    }
    */

    item(FEAT_INDUSTRIES, industry_glass_works, 31) {
        property {
            substitute: 7;
            name: string(STR_INDUSTRY_GLASS_WORKS_NAME);
            cargo_types: [
                accept_cargo("SAND", produce_cargo("GLAS", 1)),
                accept_cargo("LIME", produce_cargo("GLAS", 1))
            ];
            prob_map_gen: 5;
            prob_in_game: 2;
            life_type: IND_LIFE_TYPE_PROCESSING;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_limestone_quarry),
                industry_type(IND_TYPE_NEW, industry_gold_mine),
                industry_type(IND_TYPE_NEW, industry_factory)
            ];
            nearby_station_name: string(STR_INDUSTRY_PRINTING_WORKS_STATION_NAME);
        }
    }
}

// Resort, #32
tilelayout jrhotel_tilelayout1 {
	0, 0: jrhotel_tile_N;
	0, 1: jrhotel_tile_E;
	1, 1: jrhotel_tile_S;
	1, 0: jrhotel_tile_W;
}

spritelayout jrhotel_tile_N_spritelayout {
	ground { sprite: GROUNDSPRITE_CONCRETE; }
	building { sprite: (construction_state==0 ? 4471 : construction_state==3 ? 4475 : 4473); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_STRUCT_YELLOW; }
}

spritelayout jrhotel_tile_E_spritelayout {
	ground { sprite: GROUNDSPRITE_CONCRETE; }
	building { sprite: (construction_state==0 ? 4472 : construction_state==3 ? 4476 : 4474); recolour_mode: RECOLOUR_REMAP; palette: PALETTE_STRUCT_YELLOW; }
}

spritelayout jrhotel_tile_S_spritelayout {
	ground { sprite: GROUNDSPRITE_NORMAL; }
	childsprite { sprite: 1455; yoffset: 6; }
}

spritelayout jrhotel_tile_W_spritelayout {
	ground { sprite: GROUNDSPRITE_NORMAL; }
	building { sprite: 1456; }
}

if (1) {
    item (FEAT_INDUSTRYTILES, jrhotel_tile_N) {
    	property {
    		substitute: 0;
            accepted_cargos: [];
    		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    	}
    	graphics {
    		jrhotel_tile_N_spritelayout;
    	}
    }

    item (FEAT_INDUSTRYTILES, jrhotel_tile_E) {
    	property {
    		substitute: 0;
            accepted_cargos: [];
    		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    	}
    	graphics {
    		jrhotel_tile_E_spritelayout;
    	}
    }

    item (FEAT_INDUSTRYTILES, jrhotel_tile_S) {
    	property {
    		substitute: 0;
    		accepted_cargos: [];
    		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    	}
    	graphics {
    		jrhotel_tile_S_spritelayout;
    	}
    }

    item (FEAT_INDUSTRYTILES, jrhotel_tile_W) {
    	property {
    		substitute: 0;
    		accepted_cargos: [];
    		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
    	}
    	graphics {
    		jrhotel_tile_W_spritelayout;
    	}
    }

    item(FEAT_INDUSTRIES, industry_resort, 32) {
        property {
            substitute: 1;
            name: string(STR_INDUSTRY_RESORT_NAME);
            layouts: [jrhotel_tilelayout1];
            cargo_types: [
                produce_cargo("TOUR", 6),
                accept_cargo("TOUR", produce_cargo("TOUR", 0.25)),
                produce_cargo("PASS", 2),
                accept_cargo("PASS", produce_cargo("TOUR", 0.125)),
                accept_cargo("FOOD"),
                accept_cargo("BEER")
            ];
            prob_map_gen: 3;
            prob_in_game: 1;
            life_type: IND_LIFE_TYPE_BLACK_HOLE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_resort),
                industry_type(IND_TYPE_NEW, industry_city_hall),
                industry_type(IND_TYPE_NEW, industry_fruit_plantation)
            ];
            spec_flags: 0;
            nearby_station_name: string(STR_INDUSTRY_RESORT_STATION_NAME);
        }
    }
}

// Distribution Center, #33
if (1) {
    item(FEAT_INDUSTRIES, industry_distribution_center, 33) {
        property {
            substitute: 1;
            name: string(STR_INDUSTRY_DISTRIBUTION_CENTER_NAME);
            cargo_types: [
                accept_cargo("PETR"),
                accept_cargo("GOOD"),
                accept_cargo("VEHI"),
            ];
            prob_map_gen: 1;
            prob_in_game: 3;
            life_type: IND_LIFE_TYPE_BLACK_HOLE;
            conflicting_ind_types: [
                industry_type(IND_TYPE_NEW, industry_factory),
                industry_type(IND_TYPE_NEW, industry_refinery),
                industry_type(IND_TYPE_NEW, industry_printing_works)
            ];
            spec_flags: bitmask(IND_FLAG_BUILT_NEAR_TOWN, IND_FLAG_DO_NOT_FORCE_INSTANCE_AT_MAP_GENERATION);
            nearby_station_name: string(STR_INDUSTRY_DISTRIBUTION_CENTER_STATION_NAME);
        }
    }
}